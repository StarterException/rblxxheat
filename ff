--// Advanced Secure Obfuscator for Roblox
function advancedObfuscate(source, VarName, WaterMark)
    warn("Started advanced secure obfuscation")

    -- Customizable variables and default values
    local Variable = VarName or "Taurus_"
    local WM = WaterMark or "WaterMark | Secure by RBLXXHEATER"

    -- Default source if none provided
    if source == nil then
        source = [[print("Hello World!")]]
    end

    -- Time measurement
    local ticks = tick()

    -- Generate watermark
    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    -- Random name generator
    local randomName = function(length)
        local letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local name = ""
        for i = 1, length do
            local randChar = letters:sub(math.random(1, #letters), math.random(1, #letters))
            name = name .. randChar
        end
        return name
    end

    -- Fake binary data generator (safe for Roblox)
    local add_binary = function(number, s)
        local phrases = {
            "Deobfuscate this!",
            "Good luck!",
            "GhostyDuckyy",
            "Touch some grass",
            randomName(math.random(50, 150)),
        }

        for i = 1, number do
            local randPhrase = phrases[math.random(1, #phrases)]
            s = s .. "local " .. Variable .. randomName(10) .. " = '" .. randPhrase .. "'; "
        end

        return s
    end

    -- Fake function generator for Roblox-compatible obfuscation
    local generateFakeCode = function(num)
        local fakeCode = ""
        for i = 1, num do
            local fakeVar = Variable .. randomName(math.random(8, 12))
            local fakeFunc = Variable .. randomName(math.random(8, 12))
            fakeCode = fakeCode .. "local " .. fakeVar .. " = " .. tostring(math.random()) .. "; "
            fakeCode = fakeCode .. "function " .. fakeFunc .. "() return " .. tostring(math.random(1, 1000)) .. " end; "
        end
        return fakeCode
    end

    -- Simple obfuscation function using Roblox-safe strings
    local obfuscateSource = function(source)
        local obfuscatedSource = ""
        for i = 1, #source do
            obfuscatedSource = obfuscatedSource .. "\\" .. string.byte(source:sub(i, i))
        end
        return obfuscatedSource
    end

    -- Encrypt the source code without problematic escape sequences
    local encryptedSource = obfuscateSource(source)

    -- Generate dummy obfuscated source
    local SourceByte = [[local ]]..Variable..randomName(15)..[[ = "]]..encryptedSource..[["]]
    local Loadstring = [[local ]]..Variable..randomName(15)..[[ = loadstring("]]..encryptedSource..[[")()]]

    -- Generate final obfuscated code with fake code and no escape sequence errors
    local obfuscated = WM .. Loadstring .. "; " .. add_binary(math.random(30, 50), "") .. SourceByte .. "; " .. generateFakeCode(math.random(2, 5))

    -- Copy the obfuscated code to clipboard
    setclipboard(obfuscated)

    -- Output the time taken for obfuscation
    warn("Done obfuscating in " .. tostring(tick() - ticks) .. " seconds")

    return obfuscated
end

--// Module wrapper
return function(source, CustomVarName, WaterMark)
    task.spawn(function()
        advancedObfuscate(source, CustomVarName, WaterMark)
    end)
end
