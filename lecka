--// Advanced Ultra Secure Obfuscator for Roblox (Roblox-compatible)
local httpService = game:GetService("HttpService") -- Required for simple obfuscation techniques

function advancedObfuscate(source, VarName, WaterMark)
    warn("Started advanced ultra secure obfuscation with Anti-Deobfuscation mechanisms")

    -- Customizable variables and default values
    local Variable = VarName or "Taurus_"
    local WM = WaterMark or "WaterMark | Secure by RBLXXHEATER"

    -- Default source if none provided
    if source == nil then
        source = [[print("Hello World!")]]
    end

    -- Time measurement
    local ticks = tick()

    -- Generate watermark
    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    -- Random name generator for variables
    local randomName = function(length)
        local letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local name = ""
        for i = 1, length do
            local randChar = letters:sub(math.random(1, #letters), math.random(1, #letters))
            name = name .. randChar
        end
        return name
    end

    -- Generate random numbers for obfuscation
    local generateRandomNumbers = function()
        local randomNumber = ""
        for i = 1, math.random(10, 20) do
            randomNumber = randomNumber .. tostring(math.random(0, 9))
        end
        return randomNumber
    end

    -- Simple obfuscation function for source code using byte conversion
    local obfuscateSource = function(source)
        local obfuscatedSource = ""
        for i = 1, #source do
            obfuscatedSource = obfuscatedSource .. "\\" .. string.byte(source:sub(i, i))
        end
        return obfuscatedSource
    end

    -- Add a dummy verification to protect against tampering (Roblox-friendly)
    local function verifyCode(expected, current)
        if expected ~= current then
            error("Script integrity check failed. Potential tampering detected!")
        end
    end

    -- Anti-Deobfuscation mechanism that will disrupt deobfuscation tools
    local function antiDeobfuscationProtection()
        local crashVar = randomName(12)
        return "local " .. crashVar .. " = loadstring; loadstring = nil; if " .. crashVar .. " then error('Script tampering detected!') end;"
    end

    -- Create a mock hash for the source code (Roblox-compatible)
    local function createMockHash()
        return httpService:GenerateGUID(false):sub(1, 10)
    end

    -- Useless code generators (loops, if-statements, and fake functions)
    local addUselessLoops = function(num)
        local loops = ""
        for i = 1, num do
            local fakeLoopVar = Variable .. randomName(math.random(8, 12))
            local fakeLoopLimit = math.random(1000, 5000)
            loops = loops .. "for " .. fakeLoopVar .. " = 1, " .. fakeLoopLimit .. " do end; "
        end
        return loops
    end

    -- Add fake recursive functions for obfuscation
    local addRecursiveFunctions = function(num)
        local recursiveCode = ""
        for i = 1, num do
            local funcName = Variable .. randomName(math.random(8, 12))
            local funcCall = Variable .. randomName(math.random(8, 12))
            recursiveCode = recursiveCode .. "function " .. funcName .. "() " .. funcCall .. "(); end; "
            recursiveCode = recursiveCode .. "function " .. funcCall .. "() " .. funcName .. "(); end; "
        end
        return recursiveCode
    end

    -- Add fake code for obfuscation
    local generateFakeCode = function(num)
        local fakeCode = ""
        for i = 1, num do
            local fakeVar = Variable .. randomName(math.random(8, 12))
            local fakeFunc = Variable .. randomName(math.random(8, 12))
            fakeCode = fakeCode .. "local " .. fakeVar .. " = " .. tostring(math.random()) .. "; "
            fakeCode = fakeCode .. "function " .. fakeFunc .. "() return " .. tostring(math.random(1, 1000)) .. " end; "
        end
        return fakeCode
    end

    -- Add deeply nested tables for complexity
    local addNestedTables = function(depth)
        local nestedTables = ""
        for i = 1, depth do
            local fakeTable = Variable .. randomName(math.random(8, 12))
            nestedTables = nestedTables .. "local " .. fakeTable .. " = {" .. randomName(math.random(10, 20)) .. " = {}}; "
        end
        return nestedTables
    end

    -- Generate a hash for the source code
    local expectedHash = createMockHash()

    -- Encrypt the source code into byte sequence
    local encryptedSource = obfuscateSource(source)

    -- Generate obfuscated source code
    local SourceByte = [[local ]]..Variable..randomName(15)..[[ = "]]..encryptedSource..[["]]
    local Loadstring = [[local ]]..Variable..randomName(15)..[[ = loadstring("]]..encryptedSource..[[")()]]

    -- Final obfuscated code with multiple protection layers (Roblox-compatible)
    local obfuscated = WM
        .. Loadstring
        .. "; "
        .. SourceByte
        .. "; "
        .. generateFakeCode(math.random(5, 10))
        .. addRecursiveFunctions(math.random(3, 5))
        .. addUselessLoops(math.random(2, 4))
        .. addNestedTables(math.random(5, 10))
        .. antiDeobfuscationProtection()
        .. "verifyCode('"..expectedHash.."', '"..expectedHash.."');" -- Simple hash verification

    -- Copy the obfuscated code to clipboard
    setclipboard(obfuscated)

    -- Output the time taken for obfuscation
    warn("Done obfuscating in " .. tostring(tick() - ticks) .. " seconds")

    return obfuscated
end

--// Module wrapper
return function(source, CustomVarName, WaterMark)
    task.spawn(function()
        advancedObfuscate(source, CustomVarName, WaterMark)
    end)
end
