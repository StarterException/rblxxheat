--// Enhanced Obfuscator
local function obfuscator(source, VarName, WaterMark)
    warn("Started advancedObfuscation")

    -- Standardwerte für Variablen
    local Variable = VarName or "Taurus_"
    local WM = WaterMark or "WaterMark | Secure by RBLXXHEATER"

    -- Standard-Source wenn nichts angegeben ist
    if source == nil then
        source = [[print("Hello World!")]]
    end

    -- Messung der Zeit
    local ticks = tick()

    -- Generiere das Watermark
    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    -- Zufälliger Name Generator
    local randomName = function(length)
        local letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local name = ""
        for i = 1, length do
            local randChar = letters:sub(math.random(1, #letters), math.random(1, #letters))
            name = name .. randChar
        end
        return name
    end

    -- String zu Binär konvertieren
    local StringToBinary = function(String)
        local BinaryString = {}
        for i = 1, #String do
            local Binary = string.format("%08b", String:byte(i))
            table.insert(BinaryString, Binary)
        end
        return table.concat(BinaryString, " ")
    end

    -- Binäre Daten zufällig hinzufügen
    local add_binary = function(number, s)
        local phrases = {
            "Deobfuscate this!",
            "Good luck!",
            "GhostyDuckyy",
            "Touch some grass",
            randomName(math.random(50, 150)),
        }

        for i = 1, number do
            local randPhrase = phrases[math.random(1, #phrases)]
            local binPhrase = StringToBinary(randPhrase)
            s = s .. "local " .. Variable .. randomName(10) .. " = '" .. binPhrase .. "'; "
        end

        return s
    end

    -- XOR-Verschlüsselung
    local XOR = function(str, key)
        local res = {}
        for i = 1, #str do
            local xorChar = string.char(bit.bxor(str:byte(i), key:byte((i - 1) % #key + 1)))
            table.insert(res, "\\" .. xorChar:byte())
        end
        return table.concat(res, ", ")
    end

    -- Verschlüsselungsschlüssel
    local encryptionKey = randomName(16)
    local encryptedSource = XOR(source, encryptionKey)

    -- Generierung von komplexen Strukturen
    local SourceByte = [[local ]]..Variable..randomName(15)..[[ = {]]..encryptedSource..[[}]]
    local Loadstring = [[local ]]..Variable..randomName(15)..[[ = loadstring(table.concat({]]..XOR("return function(bytes) if type(bytes) == 'table' then return loadstring(table.concat(bytes))() else return loadstring(bytes)() end end", encryptionKey)..[[}))()]]

    -- Generierung von Fake-Code
    local fake_code = function(number)
        local t = {}
        for i = 1, number do
            local createVar = Variable .. randomName(15)
            local fakeData = randomName(math.random(100, 200))
            local fakeByte = ""
            for x = 1, #fakeData do fakeByte = fakeByte .. string.byte(fakeData:sub(x, x)) .. ", " end
            table.insert(t, [[local ]]..createVar..[[ = {]]..fakeByte..[[}; ]]..[[local ]]..createVar.." = "..Variable..randomName(15)..[[()]].."; ")
        end
        return table.concat(t)
    end

    -- Kombination von allem
    local obfuscated = WM .. Loadstring .. "; " .. add_binary(math.random(30, 50), "") .. SourceByte .. "; " .. fake_code(math.random(2, 4))

    -- Kopiere den obfuskierten Code in die Zwischenablage
    setclipboard(obfuscated)

    -- Zeige die Zeit an
    warn("Done obfuscating in "..tostring(tick() - ticks).." seconds")
    return
end

--// Module
return function(source,CustomVarName,WaterMark)
    task.spawn(function()
        obfuscator(source,CustomVarName,WaterMark)
    end)
end
