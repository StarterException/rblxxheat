--[[ 
    Version: 2.0.0
    Last Update: 21 / 09 / 2024 | Day / Month / Year
]]--

--// Source
function advancedObfuscate(source, VarName, WaterMark)
    warn("Started advanced obfuscation")

    -- Default variables
    local Variable = VarName or "Taurus_"
    local WM

    -- Default source if none provided
    if source == nil then
        source = [[print("Hello World!")]]
    end

    -- Time measurement
    local ticks = tick()

    -- Generate watermark
    if typeof(WaterMark) == "string" and WaterMark ~= nil then
        WM = "    "..tostring(WaterMark).." | Secure by GhostyDuckyy#7698"
    else
        WM = "    ".."WaterMark".." | Secure by GhostyDuckyy#7698"
    end

    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    -- Random name generator with extended randomization
    local random_ = function(length)
        local characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local code = ""
        for i = 1, length do
            local randomChar = characters:sub(math.random(1, #characters), math.random(1, #characters))
            code = code .. randomChar
        end
        return code
    end

    -- Optimized string to binary function
    local StringToBinary = function(String)
        local BinaryString = {}
        for i = 1, #String do
            local Byte = string.byte(String:sub(i, i))
            local Binary = ""
            for j = 7, 0, -1 do
                Binary = Binary .. (math.floor(Byte / 2^j) % 2)
            end
            table.insert(BinaryString, Binary)
        end
        return table.concat(BinaryString, " ")
    end

    -- Function to add random binary data
    local add_binary = function(number, s)
        local highest = 1
        local topic = {
            "Deobfuscate?",
            "Hello World!",
            "IronBrew Fork? Nope.",
            "PSU Fork? Nope.",
            "Touch some grass",
            "New update when?",
            "GhostyDuckyy",
            "Free obfuscator!",
            "E",
            random_(math.random(50,150)),
        }

        for i, v in pairs(topic) do
            if i > highest then
                highest = i
            end
        end

        for i = 1, number do
            local str = [[local ]]..Variable..random_(math.random(10, 12))..[[ = "]]..StringToBinary(topic[math.random(1, highest)])..[["; ]]
            s = s .. str
        end

        return tostring(s)
    end

    -- Generate random complex variables
    local Random_Variable = {
        TableByte = random_(math.random(15, 20)),
        Table_concat = random_(math.random(15, 20)),
        Loadstring = random_(math.random(15, 20)),
    }

    -- Generate complex troll function
    local troll_func = [[function() ]]..add_binary(math.random(30, 50), "")..[[ end]]
    local troll_var = [[local ]]..Variable..random_(math.random(15, 20))..[[ = ]]..troll_func

    -- Encrypt the source byte data
    local SourceByte = ""
    for i = 1, #source do
        SourceByte = SourceByte .. '"\\'..string.byte(source:sub(i, i))..'", '
    end
    local TableByte = [[local ]]..Variable..Random_Variable.TableByte..[[ = {]]..SourceByte..[[}]]

    -- Loadstring function generation
    local Loadstring = [[local ]]..Variable..Random_Variable.Loadstring..[[ = loadstring(table.concat({"\114", "\101", "\116", "\117", "\114", "\110", "\32", "\102", "\117", "\110", "\99", "\116", "\105", "\111", "\110", "\40", "\98", "\121", "\116", "\101", "\41", "\10", "\32", "\32", "\32", "\32", "\105", "\102", "\32", "\116", "\121", "\112", "\101", "\111", "\102", "\40", "\98", "\121", "\116", "\101", "\41", "\32", "\61", "\61", "\32", "\34", "\116", "\97", "\98", "\108", "\101", "\34", "\32", "\116", "\104", "\101", "\110", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\108", "\111", "\97", "\100", "\115", "\116", "\114", "\105", "\110", "\103", "\40", "\116", "\97", "\98", "\108", "\101", "\46", "\99", "\111", "\110", "\99", "\97", "\116", "\40", "\98", "\121", "\116", "\101", "\41", "\41", "\40", "\41", "\10", "\32", "\32", "\32", "\32", "\101", "\108", "\115", "\101", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\98", "\121", "\116", "\101", "\32", "\61", "\32", "\123", "\98", "\121", "\116", "\101", "\125", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\108", "\111", "\97", "\100", "\115", "\116", "\114", "\105", "\110", "\103", "\40", "\116", "\97", "\98", "\108", "\101", "\46", "\99", "\111", "\110", "\99", "\97", "\116", "\40", "\98", "\121", "\116", "\101", "\41", "\41", "\40", "\41", "\10", "\32", "\32", "\32", "\32", "\101", "\110", "\100", "\10", "\101", "\110", "\100", "\10",}))()]]

    -- Generate fake code
    local fake_code = function(number, r)
        local t = {}
        for i = 1, number do
            local create_Var = Variable..random_(math.random(15, 20))
            local random

            if r ~= nil then
                random = "return "..random_(tonumber(r))
            else
                random = "return "..random_(math.clamp(1000, #source / 2, #source))
            end

            local byte = ""
            for x = 1, #random do 
                byte = byte .. '"\\'..string.byte(random:sub(x, x))..'", ' 
            end
            local fake = [[local ]]..create_Var..[[ = {]]..byte..[[}; ]]..[[local ]]..create_Var.." = "..Variable..Random_Variable.Loadstring..[[(]]..create_Var..[[); ]]
            table.insert(t, fake)
        end

        return table.concat(t)
    end

    -- Combine all obfuscation layers
    local obfuscated = WM..troll_var.."; "..Loadstring.."; "..fake_code(math.random(2, 4), math.random(400, 600))..TableByte.."; "..[[local ]]..Variable..random_(math.random(15, 20)).." = "..Variable..Random_Variable.Loadstring.."("..Variable..Random_Variable.TableByte..")".."; "..fake_code(math.random(2, 4), math.random(#source / 2, #source * 2))

    -- Copy the obfuscated code to clipboard
    setclipboard(obfuscated)
    
    -- Output the completion time
    warn("Done obfuscating in "..tostring(tick() - ticks).." second")
    
    return obfuscated
end

--// Module wrapper
return function(source, CustomVarName, WaterMark)
    task.spawn(function()
        advancedObfuscate(source, CustomVarName, WaterMark)
    end)
end
