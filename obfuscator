function robloxObfuscate(source, VarName, WaterMark)
    local Variable = VarName
    local WM

    if source == nil then
        error("No script provided!")
        return
    end

    local ticks = tick()

    -- Watermark generation
    if typeof(WaterMark) == "string" and WaterMark ~= nil then
        WM = "    "..tostring(WaterMark).." | Secure by Flurace"
    else
        WM = "    ".."AwesomeHub".." | Secure by Flurace"
    end

    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    -- Random string generator with increased complexity
    local random_ = function(length)
        local letters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
        local code = ""

        for i = 1, tonumber(length) do
            local charType = math.random(1, 3)
            if charType == 1 then
                code = code .. letters[math.random(1, 26)]
            elseif charType == 2 then
                code = code .. string.upper(letters[math.random(1, 26)])
            else
                code = code .. tostring(math.random(0, 9))
            end
        end
        return code
    end

    -- String encryption and decryption
    local function encrypt_string(str)
        local encrypted = ""
        for i = 1, #str do
            encrypted = encrypted .. string.char(string.byte(str, i) + 3)  -- Simple Caesar shift
        end
        return encrypted
    end

    local function decrypt_string(str)
        local decrypted = ""
        for i = 1, #str do
            decrypted = decrypted .. string.char(string.byte(str, i) - 3)
        end
        return decrypted
    end

    -- Delayed execution to hinder debugging tools
    local function delayed_execution()
        local start_time = tick()
        while tick() - start_time < 0.5 do
            -- Delay to slow down reverse engineering tools
        end
    end

    -- Random noise generator (dummy variables and functions)
    local function add_random_noise()
        local dummy_var1 = math.random(1000, 9999)
        local dummy_var2 = math.random(1000, 9999)
        local dummy_func1 = function()
            return dummy_var1 * dummy_var2
        end
        dummy_func1()  -- Meaningless but confusing
    end

    -- Dynamic variable renaming
    local dynamic_var = math.random(1, 2) == 1 and encrypt_string("sensitiveData") or encrypt_string("uselessData")

    -- Environment check for Roblox execution
    local function check_environment()
        if game and game:IsLoaded() then
            if game.PlaceId ~= expectedPlaceId then
                error("Script executed in the wrong environment.")
            end
        else
            error("Roblox environment not detected. Exiting.")
        end
    end

    -- Obfuscate source code into a byte array (with string encryption)
    local function obfuscate_source(source_code)
        local encrypted_source = ""
        for i = 1, #source_code do
            encrypted_source = encrypted_source .. encrypt_string(source_code:sub(i, i))
        end
        return encrypted_source
    end

    -- Self-check and Anti-Tamper Mechanism
    local original_checksum = math.random(1, 1000)  -- Simulating a simple hash check
    local function verify_integrity()
        if original_checksum ~= math.random(1, 1000) then
            error("Code tampering detected!")
        end
    end

    -- Assemble the obfuscated script
    local obfuscated = WM ..
        "local dynamic_var = decrypt_string('" .. encrypt_string(dynamic_var) .. "')" .. "\n" ..
        "check_environment()" .. "\n" ..
        "verify_integrity()" .. "\n" ..
        "add_random_noise()" .. "\n" ..
        "delayed_execution()" .. "\n" ..
        "local encrypted_source = '" .. obfuscate_source(source) .. "'; " ..
        "local real_code = decrypt_string(encrypted_source); " ..
        "loadstring(real_code)()"

    -- Copy to clipboard and finish
    setclipboard(obfuscated)
    warn("Obfuscation completed in "..tostring(tick() - ticks).." seconds")
end

-- Example of running the obfuscation with a script
local script = [[
    print("This is a test script")
    local a = 5
    local b = 10
    print("Result:", a + b)
]]
robloxObfuscate(script, "VarName", "AwesomeHub")
